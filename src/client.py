import socket
import threading
import time
from common import create_board, print_board, check_win

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi th·ªùi gian
time_left = 40
timer_running = False
timer_thread = None

def countdown_timer():
    global time_left, timer_running
    while timer_running and time_left > 0:
        time.sleep(1)
        time_left -= 1
        # In th·ªùi gian c√≤n l·∫°i m·ªói 5 gi√¢y ho·∫∑c 10 gi√¢y cu·ªëi
        if time_left <= 10 or time_left % 5 == 0:
            print(f"‚è±Ô∏è C√≤n {time_left} gi√¢y")
    
    # N·∫øu h·∫øt gi·ªù v√† timer v·∫´n ch·∫°y
    if timer_running and time_left <= 0:
        print("‚è∞ H·∫æT GI·ªú!")

def start_timer():
    global time_left, timer_running, timer_thread
    time_left = 40
    timer_running = True
    timer_thread = threading.Thread(target=countdown_timer)
    timer_thread.daemon = True
    timer_thread.start()

def stop_timer():
    global timer_running
    timer_running = False
    if timer_thread and timer_thread.is_alive():
        # ƒê·ª£i thread k·∫øt th√∫c
        timer_thread.join(0.1)

def recv_move(sock):
    try:
        data = sock.recv(1024).decode().strip()
        if not data:
            print("‚õî M·∫•t k·∫øt n·ªëi v·ªõi ƒë·ªëi th·ªß.")
            return None
        
        # Ki·ªÉm tra n·∫øu l√† th√¥ng b√°o h·∫øt gi·ªù t·ª´ ƒë·ªëi th·ªß
        if data == "TIMEOUT":
            print("üïí ƒê·ªëi th·ªß ƒë√£ h·∫øt th·ªùi gian!")
            return (-2, -2)  # M√£ ƒë·∫∑c bi·ªát cho h·∫øt gi·ªù
        
        x, y = map(int, data.split())
        return x, y
    except:
        print("‚õî L·ªói khi nh·∫≠n d·ªØ li·ªáu t·ª´ ƒë·ªëi th·ªß.")
        return None

def send_move(sock, x, y):
    try:
        sock.send(f"{x} {y}".encode())
    except:
        print("‚õî G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i.")


def send_timeout(sock):
    try:
        sock.send("TIMEOUT".encode())
    except:
        print("‚õî G·ª≠i th√¥ng b√°o h·∫øt gi·ªù th·∫•t b·∫°i.")

def get_valid_move(board, symbol):
    global time_left, timer_running
    
    # B·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù
    start_timer()
    
    print(f"B·∫°n ({symbol}) c√≥ {time_left} gi√¢y ƒë·ªÉ nh·∫≠p t·ªça ƒë·ªô (x y): ")
    
    # S·ª≠ d·ª•ng c∆° ch·∫ø thay th·∫ø thay v√¨ select
    while timer_running:
        if time_left <= 0:
            stop_timer()
            print("‚è∞ B·∫°n ƒë√£ h·∫øt th·ªùi gian!")
            return (-2, -2)  # M√£ ƒë·∫∑c bi·ªát cho h·∫øt gi·ªù
        
        # S·ª≠ d·ª•ng c∆° ch·∫ø input th√¥ng th∆∞·ªùng v·ªõi timeout ki·ªÉm so√°t b·∫±ng thread
        try:
            # T·∫°o thread ri√™ng ƒë·ªÉ ƒë·ªçc input
            input_value = [None]
            input_provided = [False]
            
            def get_input():
                try:
                    value = input().strip()
                    if value:
                        input_value[0] = value
                        input_provided[0] = True
                except Exception as e:
                    print(f"L·ªói khi ƒë·ªçc input: {e}")
            
            input_thread = threading.Thread(target=get_input)
            input_thread.daemon = True
            input_thread.start()
            
            # ƒê·ª£i trong khi ki·ªÉm tra th·ªùi gian
            max_wait = min(1, time_left)  # ƒê·ª£i t·ªëi ƒëa 1 gi√¢y ho·∫∑c th·ªùi gian c√≤n l·∫°i
            wait_until = time.time() + max_wait
            
            while time.time() < wait_until and timer_running and time_left > 0 and not input_provided[0]:
                time.sleep(0.1)
            
            if input_provided[0]:
                move = input_value[0]
                try:
                    x, y = map(int, move.split())
                    if not (0 <= x < len(board) and 0 <= y < len(board[0])):
                        print("‚ö†Ô∏è T·ªça ƒë·ªô n·∫±m ngo√†i b√†n c·ªù.")
                        continue
                    if board[x][y] != ".":
                        print("‚ö†Ô∏è √î ƒë√£ ƒë∆∞·ª£c ƒë√°nh.")
                        continue
                    
                    stop_timer()
                    return x, y
                except ValueError:
                    print("‚ö†Ô∏è Nh·∫≠p sai ƒë·ªãnh d·∫°ng. H√£y nh·∫≠p x y (vd: 1 2)")
            else:
                # N·∫øu kh√¥ng c√≥ input trong kho·∫£ng th·ªùi gian ch·ªù
                # Hi·ªÉn th·ªã th√¥ng b√°o ƒë·ªãnh k·ª≥
                if time_left % 5 == 0 or time_left <= 10:
                    print(f"‚è±Ô∏è C√≤n {time_left} gi√¢y ƒë·ªÉ ƒë√°nh. Nh·∫≠p t·ªça ƒë·ªô (x y): ", end="", flush=True)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói: {e}")

def ask_continue(sock):
    msg = sock.recv(1024).decode('utf-8')
    print(msg)
    ans = input().strip().lower()
    sock.send(ans.encode('utf-8'))
    return ans == 'y'

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("127.0.0.1", 9999))

    start_msg = s.recv(1024).decode('utf-8')
    print(start_msg)

    symbol = "X" if "X" in start_msg else "O"
    enemy_symbol = "O" if symbol == "X" else "X"

    while True:
        board = create_board()
        print_board(board)
        is_my_turn = symbol == "X"

        # V√≤ng l·∫∑p ch∆°i 1 v√°n
        while True:
            if is_my_turn:
                print(f"üïí L∆∞·ª£t c·ªßa b·∫°n! B·∫°n c√≥ 40 gi√¢y ƒë·ªÉ ƒë√°nh.")
                x, y = get_valid_move(board, symbol)
                
                # Ki·ªÉm tra h·∫øt gi·ªù
                if x == -2 and y == -2:
                    print("‚è∞ B·∫°n ƒë√£ thua do h·∫øt th·ªùi gian!")
                    send_timeout(s)
                    break
                
                board[x][y] = symbol
                print_board(board)
                if check_win(board, x, y, symbol):
                    print("üéâ B·∫°n ƒë√£ th·∫Øng!")
                    send_move(s, -1, -1)
                    break
                send_move(s, x, y)
            else:
                print("‚è≥ ƒêang ch·ªù ƒë·ªëi th·ªß ƒë√°nh...")
                move = recv_move(s)
                if move is None:
                    return
                
                x, y = move
                if x == -1 and y == -1:
                    print("‚ùå ƒê·ªëi th·ªß ƒë√£ th·∫Øng. B·∫°n ƒë√£ thua!")
                    break
                elif x == -2 and y == -2:
                    print("üéâ ƒê·ªëi th·ªß ƒë√£ h·∫øt th·ªùi gian! B·∫°n th·∫Øng!")
                    break
                
                board[x][y] = enemy_symbol
                print("üìç ƒê·ªëi th·ªß ƒë√£ ƒë√°nh:")
                print_board(board)
                if check_win(board, x, y, enemy_symbol):
                    print("‚ùå B·∫°n ƒë√£ thua!")
                    break

            is_my_turn = not is_my_turn

        # Sau khi k·∫øt th√∫c v√°n, h·ªèi ch∆°i l·∫°i
        while True:
            cont_msg = s.recv(1024).decode('utf-8')
            print(cont_msg)
            if "ch∆°i l·∫°i" in cont_msg:
                ans = input().strip().lower()
                s.send(ans.encode('utf-8'))
                # Ch·ªù x√°c nh·∫≠n t·ª´ server
                confirm_msg = s.recv(1024).decode('utf-8')
                print(confirm_msg)
                if "B·∫Øt ƒë·∫ßu v√°n m·ªõi" in confirm_msg:
                    break  # Tho√°t v√≤ng h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i v√°n m·ªõi
                elif "K·∫øt th√∫c" in confirm_msg:
                    s.close()
                    return
            elif "K·∫øt th√∫c" in cont_msg:
                s.close()
                return
            else:
                ans = input().strip().lower()
                s.send(ans.encode('utf-8'))

if __name__ == "__main__":
    main()