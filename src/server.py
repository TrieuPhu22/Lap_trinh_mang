import socket
import sys
import threading # S·ª≠ d·ª•ng threading ƒë·ªÉ x·ª≠ l√Ω m·ªói c·∫∑p client trong m·ªôt lu·ªìng ri√™ng

# H√†m x·ª≠ l√Ω m·ªôt c·∫∑p client
def handle_clients(conn1, addr1, conn2, addr2):
    print(f"‚úÖ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c·∫∑p ng∆∞·ªùi ch∆°i: {addr1} (X) v√† {addr2} (O)")
    try:
        conn1.sendall("B·∫°n l√† X".encode('utf-8'))
        conn2.sendall("B·∫°n l√† O".encode('utf-8'))

        while True: # V√≤ng l·∫∑p cho nhi·ªÅu v√°n ch∆°i trong c√πng m·ªôt c·∫∑p k·∫øt n·ªëi
            print(f"\n--- B·∫Øt ƒë·∫ßu v√°n m·ªõi gi·ªØa {addr1} v√† {addr2} ---")
            game_over = False
            while not game_over: # V√≤ng l·∫∑p cho 1 v√°n ch∆°i
                # Nh·∫≠n t·ª´ ng∆∞·ªùi ch∆°i 1 (X)
                try:
                    move1 = conn1.recv(1024)
                    if not move1:
                        print(f"‚ùå Ng∆∞·ªùi ch∆°i 1 ({addr1}) ƒë√£ ng·∫Øt k·∫øt n·ªëi. K·∫øt th√∫c tr√≤ ch∆°i.")
                        game_over = True
                        break
                    
                    move_str1 = move1.decode().strip()
                    print(f"Ng∆∞·ªùi ch∆°i 1 (X) g·ª≠i: {move_str1}")
                    conn2.sendall(move1) # Chuy·ªÉn ti·∫øp n∆∞·ªõc ƒëi cho ng∆∞·ªùi ch∆°i 2
                    if move_str1 == "-1 -1": # T√≠n hi·ªáu th·∫Øng
                        game_over = True
                        break
                except Exception as e:
                    print(f"‚ùå L·ªói khi nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi ch∆°i 1 ({addr1}): {e}")
                    game_over = True
                    break

                if game_over: break 

                # Nh·∫≠n t·ª´ ng∆∞·ªùi ch∆°i 2 (O)
                try:
                    move2 = conn2.recv(1024)
                    if not move2:
                        print(f"‚ùå Ng∆∞·ªùi ch∆°i 2 ({addr2}) ƒë√£ ng·∫Øt k·∫øt n·ªëi. K·∫øt th√∫c tr√≤ ch∆°i.")
                        game_over = True
                        break
                    
                    move_str2 = move2.decode().strip()
                    print(f"Ng∆∞·ªùi ch∆°i 2 (O) g·ª≠i: {move_str2}")
                    conn1.sendall(move2) # Chuy·ªÉn ti·∫øp n∆∞·ªõc ƒëi cho ng∆∞·ªùi ch∆°i 1
                    if move_str2 == "-1 -1": # T√≠n hi·ªáu th·∫Øng
                        game_over = True
                        break
                except Exception as e:
                    print(f"‚ùå L·ªói khi nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi ch∆°i 2 ({addr2}): {e}")
                    game_over = True
                    break
            
            # Sau khi m·ªôt v√°n k·∫øt th√∫c, h·ªèi ch∆°i l·∫°i
            if not game_over: # Ch·ªâ h·ªèi n·∫øu game k·∫øt th√∫c b√¨nh th∆∞·ªùng (c√≥ ng∆∞·ªùi th·∫Øng)
                cont1 = ask_continue(conn1, 1)
                cont2 = ask_continue(conn2, 2)

                if cont1 and cont2:
                    conn1.sendall("C·∫£ hai ƒë·ªìng √Ω ch∆°i l·∫°i. B·∫Øt ƒë·∫ßu v√°n m·ªõi!".encode('utf-8'))
                    conn2.sendall("C·∫£ hai ƒë·ªìng √Ω ch∆°i l·∫°i. B·∫Øt ƒë·∫ßu v√°n m·ªõi!".encode('utf-8'))
                    # V√≤ng l·∫∑p ngo√†i (c·ªßa handle_clients) s·∫Ω ti·∫øp t·ª•c ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n m·ªõi
                else:
                    conn1.sendall("M·ªôt trong hai kh√¥ng ƒë·ªìng √Ω. K·∫øt th√∫c tr·∫≠n ƒë·∫•u.".encode('utf-8'))
                    conn2.sendall("M·ªôt trong hai kh√¥ng ƒë·ªìng √Ω. K·∫øt th√∫c tr·∫≠n ƒë·∫•u.".encode('utf-8'))
                    break # Tho√°t v√≤ng l·∫∑p ngo√†i, k·∫øt th√∫c c·∫∑p client n√†y
            else:
                # N·∫øu game_over l√† True do m·∫•t k·∫øt n·ªëi, kh√¥ng h·ªèi ch∆°i l·∫°i n·ªØa
                break

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω c·∫∑p client ({addr1}, {addr2}): {e}")
    finally:
        print(f"üîå ƒê√≥ng k·∫øt n·ªëi cho c·∫∑p ng∆∞·ªùi ch∆°i: {addr1} v√† {addr2}")
        if conn1:
            conn1.close()
        if conn2:
            conn2.close()

def ask_continue(conn, player_num):
    """H·ªèi ng∆∞·ªùi ch∆°i c√≥ mu·ªën ch∆°i l·∫°i kh√¥ng v√† tr·∫£ v·ªÅ l·ª±a ch·ªçn c·ªßa h·ªç."""
    try:
        conn.sendall("B·∫°n c√≥ mu·ªën ch∆°i l·∫°i kh√¥ng? (y/n): ".encode('utf-8'))
        resp = conn.recv(1024).decode('utf-8').strip().lower()
        print(f"Ng∆∞·ªùi ch∆°i {player_num} ch·ªçn: {resp}")
        return resp == 'y'
    except Exception as e:
        print(f"L·ªói khi h·ªèi ng∆∞·ªùi ch∆°i {player_num} ch∆°i l·∫°i: {e}")
        return False # Coi nh∆∞ kh√¥ng ƒë·ªìng √Ω n·∫øu c√≥ l·ªói

def main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    HOST = "0.0.0.0"
    PORT = 9999
    
    try:
        server.bind((HOST, PORT))
        server.listen(2) # C√≥ th·ªÉ l·∫Øng nghe nhi·ªÅu h∆°n 2 k·∫øt n·ªëi n·∫øu mu·ªën h√†ng ƒë·ª£i
        print(f"üéÆ M√°y ch·ªß Gomoku ƒëang ch·∫°y tr√™n {HOST}:{PORT}")
        print("üéÆ ƒêang ch·ªù ng∆∞·ªùi ch∆°i k·∫øt n·ªëi...")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o m√°y ch·ªß: {e}")
        sys.exit(1)

    # V√≤ng l·∫∑p v√¥ h·∫°n ƒë·ªÉ server lu√¥n l·∫Øng nghe c√°c k·∫øt n·ªëi m·ªõi
    while True:
        try:
            print("ƒêang ch·ªù ng∆∞·ªùi ch∆°i 1...")
            conn1, addr1 = server.accept()
            print(f"‚úÖ Ng∆∞·ªùi ch∆°i 1 ƒë√£ k·∫øt n·ªëi t·ª´ {addr1}")

            print("ƒêang ch·ªù ng∆∞·ªùi ch∆°i 2...")
            conn2, addr2 = server.accept()
            print(f"‚úÖ Ng∆∞·ªùi ch∆°i 2 ƒë√£ k·∫øt n·ªëi t·ª´ {addr2}")

            # T·∫°o m·ªôt lu·ªìng m·ªõi ƒë·ªÉ x·ª≠ l√Ω c·∫∑p client n√†y
            client_thread = threading.Thread(target=handle_clients, args=(conn1, addr1, conn2, addr2))
            client_thread.start()
            
        except KeyboardInterrupt:
            print("\nServer b·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng.")
            break # Tho√°t v√≤ng l·∫∑p ch√≠nh
        except Exception as e:
            print(f"‚ùå L·ªói trong v√≤ng l·∫∑p ch·∫•p nh·∫≠n k·∫øt n·ªëi: {e}")
            # C√≥ th·ªÉ th√™m logic ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c tho√°t t√πy v√†o lo·∫°i l·ªói

    server.close() # ƒê√≥ng socket l·∫Øng nghe khi server d·ª´ng
    print("üîå M√°y ch·ªß ƒë√£ t·∫Øt.")

if __name__ == "__main__":
    main()
