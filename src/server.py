import socket
import threading
import time

class GameServer:
    def __init__(self, host="0.0.0.0", port=9999, timeout=30):
        self.host = host
        self.port = port
        self.timeout = timeout
        self.connections = []
        self.server = None
        
    def setup_server(self):
        """Thi·∫øt l·∫≠p server socket"""
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server.bind((self.host, self.port))
        self.server.listen(2)
        self.server.settimeout(60)  # Timeout cho accept
        print(f"üéÆ Server ƒëang ch·ªù 2 ng∆∞·ªùi ch∆°i k·∫øt n·ªëi t·∫°i {self.host}:{self.port}...")
        
    def safe_send(self, conn, message):
        """G·ª≠i d·ªØ li·ªáu an to√†n v·ªõi error handling"""
        try:
            conn.sendall(message.encode('utf-8'))
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu: {e}")
            return False
            
    def safe_recv(self, conn, player_num):
        """Nh·∫≠n d·ªØ li·ªáu an to√†n v·ªõi timeout"""
        try:
            conn.settimeout(self.timeout)
            data = conn.recv(1024)
            if not data:
                print(f"‚ùå Ng∆∞·ªùi ch∆°i {player_num} ƒë√£ ng·∫Øt k·∫øt n·ªëi.")
                return None
            return data.decode('utf-8').strip()
        except socket.timeout:
            print(f"‚è∞ Timeout khi nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi ch∆°i {player_num}")
            return "TIMEOUT"
        except Exception as e:
            print(f"‚ùå L·ªói khi nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi ch∆°i {player_num}: {e}")
            return None
            
    def ask_continue(self, conn, player_num):
        """H·ªèi ng∆∞·ªùi ch∆°i c√≥ mu·ªën ch∆°i l·∫°i kh√¥ng"""
        if not self.safe_send(conn, "B·∫°n c√≥ mu·ªën ch∆°i l·∫°i kh√¥ng? (y/n): "):
            return False
            
        resp = self.safe_recv(conn, player_num)
        if resp is None:
            return False
            
        print(f"Ng∆∞·ªùi ch∆°i {player_num} ch·ªçn: {resp}")
        return resp.lower() == 'y'
        
    def handle_player_turn(self, sender_conn, receiver_conn, player_num):
        """X·ª≠ l√Ω l∆∞·ª£t c·ªßa m·ªôt ng∆∞·ªùi ch∆°i"""
        move_data = self.safe_recv(sender_conn, player_num)
        if move_data is None:
            return False
            
        # G·ª≠i n∆∞·ªõc ƒëi cho ng∆∞·ªùi ch∆°i kh√°c
        if not self.safe_send(receiver_conn, move_data):
            return False
            
        # Ki·ªÉm tra k·∫øt th√∫c v√°n
        if move_data in ["-1 -1", "TIMEOUT"]:
            return False
            
        return True
        
    def run_game_loop(self):
        """V√≤ng l·∫∑p ch√≠nh c·ªßa game"""
        while True:
            # V√≤ng l·∫∑p cho m·ªôt v√°n game
            game_ended = False
            while not game_ended:
                # L∆∞·ª£t ng∆∞·ªùi ch∆°i 1 (X)
                if not self.handle_player_turn(self.connections[0], self.connections[1], 1):
                    game_ended = True
                    break
                    
                # L∆∞·ª£t ng∆∞·ªùi ch∆°i 2 (O)
                if not self.handle_player_turn(self.connections[1], self.connections[0], 2):
                    game_ended = True
                    break
                    
            # H·ªèi ti·∫øp t·ª•c
            cont1 = self.ask_continue(self.connections[0], 1)
            cont2 = self.ask_continue(self.connections[1], 2)
            
            if cont1 and cont2:
                message = "C·∫£ hai ƒë·ªìng √Ω ch∆°i l·∫°i. B·∫Øt ƒë·∫ßu v√°n m·ªõi!"
                self.safe_send(self.connections[0], message)
                self.safe_send(self.connections[1], message)
                print("üîÑ B·∫Øt ƒë·∫ßu v√°n m·ªõi!")
                continue
            else:
                message = "M·ªôt trong hai kh√¥ng ƒë·ªìng √Ω. K·∫øt th√∫c tr·∫≠n ƒë·∫•u."
                self.safe_send(self.connections[0], message)
                self.safe_send(self.connections[1], message)
                print("üèÅ K·∫øt th√∫c tr·∫≠n ƒë·∫•u.")
                break
                
    def accept_connections(self):
        """Ch·∫•p nh·∫≠n k·∫øt n·ªëi t·ª´ 2 ng∆∞·ªùi ch∆°i"""
        try:
            # Ch·∫•p nh·∫≠n ng∆∞·ªùi ch∆°i 1
            conn1, addr1 = self.server.accept()
            print(f"‚úÖ Ng∆∞·ªùi ch∆°i 1 ƒë√£ k·∫øt n·ªëi t·ª´ {addr1}")
            self.safe_send(conn1, "B·∫°n l√† X")
            self.connections.append(conn1)
            
            # Ch·∫•p nh·∫≠n ng∆∞·ªùi ch∆°i 2
            conn2, addr2 = self.server.accept()
            print(f"‚úÖ Ng∆∞·ªùi ch∆°i 2 ƒë√£ k·∫øt n·ªëi t·ª´ {addr2}")
            self.safe_send(conn2, "B·∫°n l√† O")
            self.connections.append(conn2)
            
            return True
        except socket.timeout:
            print("‚è∞ Timeout khi ch·ªù k·∫øt n·ªëi")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói khi ch·∫•p nh·∫≠n k·∫øt n·ªëi: {e}")
            return False
            
    def cleanup(self):
        """D·ªçn d·∫πp t√†i nguy√™n"""
        for conn in self.connections:
            try:
                conn.close()
            except:
                pass
        if self.server:
            try:
                self.server.close()
            except:
                pass
        print("üîå ƒê√£ ƒë√≥ng t·∫•t c·∫£ k·∫øt n·ªëi.")
        
    def run(self):
        """Ch·∫°y server"""
        try:
            self.setup_server()
            
            if not self.accept_connections():
                return
                
            self.run_game_loop()
            
        except KeyboardInterrupt:
            print("\nüõë Server b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        finally:
            self.cleanup()

def main():
    server = GameServer()
    server.run()

if __name__ == "__main__":
    main()